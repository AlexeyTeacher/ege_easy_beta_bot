"""–ß–∞—Ç-–±–æ—Ç –≤ Telegram. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç @ege_easy_lite_beta_bot
    –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π. –¢–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥—å-—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å TOKEN –Ω–∞ —Å–≤–æ–π"""


import random
import sqlite3
from telegram.ext import Updater, Filters, MessageHandler, CallbackQueryHandler
from telegram.ext import CommandHandler, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup


TOKEN = '1855585764:AAGehI9Dd0rx90vXnR5E9W9nF9q2DG3o4NM'
USER_BASE = {}
ANSWER = ''
N_EXAMPLE = ''
# –≠—Ç–∞–ø—ã/—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIRST, SECOND, THIRD, FOURTH = range(4)
# –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
ONE, TWO, THREE, END = range(4)


def start(update, context):
    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å.
    USER_BASE[update.message.from_user.name] = [str(update.message.date)]
    keyboard = [
        [
            InlineKeyboardButton("üéû –í–∏–¥–µ–æ", callback_data=str(ONE)),
            InlineKeyboardButton("üèãÔ∏è–ó–∞–¥–∞–Ω–∏–µ‚Äç", callback_data=str(TWO))

        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {update.message.from_user.first_name}! "
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! ü¶æ \n"
        f"–Ø –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ-—Ä–∞–∑–±–æ—Ä –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á –∏–ª–∏ –¥–∞—Ç—å "
        f"—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å —Ö–æ—Ç–∏—Ç–µ üëá", reply_markup=reply_markup)

    return FIRST


def stop(update, context):
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop.
    # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update.message.reply_text(f'üññ –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, {update.message.from_user.first_name}! \n'
                              f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞–∂–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start')

    connections = sqlite3.connect('ege_easy_test.db')
    cur = connections.cursor()
    name = str(update.message.from_user.name)
    date = USER_BASE[update.message.from_user.name][0]
    other = '; '.join(USER_BASE[update.message.from_user.name][1:])
    new_que = f"""INSERT INTO user_base(user_name, date_time, other)
              VALUES(?, ?, ?) """
    cur.execute(new_que, (name, date, other,))
    connections.commit()
    connections.close()

    return ConversationHandler.END


def end(update, context):
    # –ü–ª–∞–Ω–æ–≤—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–•–≤–∞—Ç–∏—Ç".
    # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = update.callback_query
    query.answer()
    query.edit_message_text(text=f'üññ –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, {query.from_user.first_name}! \n'
                                 f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞–∂–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start')

    connections = sqlite3.connect('ege_easy_test.db')
    cur = connections.cursor()
    name = str(query.from_user.name)
    date = USER_BASE[query.from_user.name][0]
    other = '; '.join(USER_BASE[query.from_user.name][1:])
    new_que = f"""INSERT INTO user_base(user_name, date_time, other)
                  VALUES(?, ?, ?) """
    cur.execute(new_que, (name, date, other,))
    connections.commit()
    connections.close()

    return ConversationHandler.END


def run_video(update, context):
    # –ö–Ω–æ–ø–∫–∞ "–≤–∏–¥–µ–æ"
    query = update.callback_query
    query.answer()
    query.edit_message_text('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, '
                            '–≤–∏–¥–µ–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
    return FOURTH


def video(update, context):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ –ï–ì–≠
    connections = sqlite3.connect('ege_easy_test.db')
    cur = connections.cursor()
    number_lesson = update.message.text.strip().replace('‚Ññ', '')
    USER_BASE[update.message.from_user.name] += [f'–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –≤–∏–¥–µ–æ ‚Ññ{number_lesson}']
    if number_lesson in [str(i) for i in range(1, 28)]:
        que = f'SELECT * FROM lessons where id = {number_lesson}'
        result = random.choice(cur.execute(que).fetchall())
        comment = ['–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üëç', '–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è —ç—Ç–æ –≤–∏–¥–µ–æ! üòª',
                   '–î—É–º–∞—é, –≤–∞–º —ç—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è! ‚úç', '–¢–∞–∫–æ–µ –Ω–µ –≥—Ä–µ—Ö –∏ –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëå',
                   '–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞ –≤–∏–¥–µ–æ! ‚úç‚úç‚úç']
        update.message.reply_text(f'*{number_lesson}. {result[1]}*. '
                                  f'\n{random.choice(comment)}',
                                  parse_mode='Markdown')
        update.message.reply_text(result[2])
    else:
        update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, '
                                  '–Ω—É–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 27')
    keyboard = [
        [
            InlineKeyboardButton("üéû –í–∏–¥–µ–æ", callback_data=str(ONE)),
            InlineKeyboardButton("üèãÔ∏è–ó–∞–¥–∞–Ω–∏–µ‚Äç", callback_data=str(TWO)),
            InlineKeyboardButton("üíî –•–≤–∞—Ç–∏—Ç", callback_data=str(END)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        text="üëá –í—ã–±–∏—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞ üëá", reply_markup=reply_markup
    )
    return FIRST


def run_example(update, context):
    # –ö–Ω–æ–ø–∫–∞ "–∑–∞–¥–∞–Ω–∏–µ"
    query = update.callback_query
    query.answer()
    query.edit_message_text('–ù–∞–ø–∏—à–∏—Ç–µ *—á–∏—Å–ª–æ–º* –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è',
                            parse_mode='Markdown')
    return SECOND


def example(update, context):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ –ï–ì–≠
    global ANSWER, N_EXAMPLE
    connections = sqlite3.connect('ege_easy_test.db')
    cur = connections.cursor()
    number_example = update.message.text.strip().replace('‚Ññ', '')
    if number_example in [str(i) for i in range(1, 28)]:
        N_EXAMPLE = number_example
        que = f'SELECT * FROM examples where id_example = {number_example}'
        result = random.choice(cur.execute(que).fetchall())
        text = result[2].replace('\n\n', '\n')
        update.message.reply_text(f"*–ó–∞–¥–∞–Ω–∏–µ ‚Ññ {number_example}*\n {text}",
                                  parse_mode='Markdown')
        if result[3] != '–Ω–µ—Ç':
            if number_example in ['9', '10', '18', '24', '26', '27']:
                if number_example == '27':
                    update.message.reply_text(f'–°—Å—ã–ª–∫–∞ –Ω–∞ *—Ñ–∞–π–ª A*: {result[3].split()[0]}\n'
                                              f'–°—Å—ã–ª–∫–∞ –Ω–∞ *—Ñ–∞–π–ª B*: {result[3].split()[1]}',
                                              parse_mode='Markdown')
                else:
                    update.message.reply_text(f'–°—Å—ã–ª–∫–∞ –Ω–∞ *—Ñ–∞–π–ª*: {result[3]}',
                                              parse_mode='Markdown')
            else:
                context.bot.send_photo(update.message.chat_id, result[3])
        ANSWER = ' '.join(result[4].split())
        update.message.reply_text(f"‚úç –ù–∞–ø–∏—à–∏—Ç–µ *–æ—Ç–≤–µ—Ç* –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. "
                                  f"–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ *–ø—Ä–æ–±–µ–ª*",
                                  parse_mode='Markdown')
        return THIRD
    else:
        update.message.reply_text('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, '
                                  '–Ω—É–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 27')


def answer(update, context):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    global ANSWER, N_EXAMPLE
    if update.message.text.strip() == ANSWER:
        update.message.reply_text(f'üßê –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç: {ANSWER}')
        USER_BASE[update.message.from_user.name] += [f'–ó–∞–¥–∞—á–∞ ‚Ññ{N_EXAMPLE} +']
    else:
        update.message.reply_text(f'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç: {ANSWER}')
        USER_BASE[update.message.from_user.name] += [f'–ó–∞–¥–∞—á–∞ ‚Ññ{N_EXAMPLE} -']

    keyboard = [
        [
            InlineKeyboardButton("üéû –í–∏–¥–µ–æ", callback_data=str(ONE)),
            InlineKeyboardButton("üèãÔ∏è–ó–∞–¥–∞–Ω–∏–µ‚Äç", callback_data=str(TWO)),
            InlineKeyboardButton("üíî –•–≤–∞—Ç–∏—Ç", callback_data=str(END)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        text="üëá –í—ã–±–∏—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞ üëá", reply_markup=reply_markup
    )
    return FIRST


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /start. –û–Ω–∞ –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
        entry_points=[CommandHandler('start', start)],
        states={
            FIRST: [
                CallbackQueryHandler(run_video, pattern='^' + str(ONE) + '$'),
                CallbackQueryHandler(run_example, pattern='^' + str(TWO) + '$'),
                CallbackQueryHandler(end, pattern='^' + str(END) + '$')
            ],
            SECOND: [MessageHandler(Filters.text, example)],
            THIRD: [MessageHandler(Filters.text, answer)],
            FOURTH: [MessageHandler(Filters.text, video)]
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
